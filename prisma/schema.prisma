generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider     = "mongodb"
  url          = env("MONGODB_URI")
  relationMode = "prisma"
}

enum Role {
  Tecnico
  AdministrativoTecnico
  AdministrativoContable
  Auditor
}

model Activity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt

  @@map("activities")
}

model Branch {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date
  number    Int?
  name      String?

  clientId String @map("client") @db.ObjectId
  client   Client @relation(fields: [clientId], references: [id])

  cityId     String       @map("city") @db.ObjectId
  city       City         @relation(fields: [cityId], references: [id])
  Preventive Preventive[]
  Task       Task[]
  budgets    Budget[]

  businessesIDs String[]       @db.ObjectId
  businesses    Business[]     @relation(fields: [businessesIDs], references: [id])
  serviceOrder  ServiceOrder[]

  @@map("branches")
}

model Business {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date
  name      String    @unique(map: "name_1")

  preventives    Preventive[]
  tasks          Task[]
  billingProfile BillingProfile?

  branchesIDs  String[]       @db.ObjectId
  branches     Branch[]       @relation(fields: [branchesIDs], references: [id])
  serviceOrder ServiceOrder[]
  Bill         Bill[]
  taskPrices   TaskPrice[]

  @@map("businesses")
}

model City {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date
  name      String    @unique(map: "name_1")

  provinceId String   @db.ObjectId
  province   Province @relation(fields: [provinceId], references: [id])

  users  User[]
  Branch Branch[]

  @@map("cities")
}

model Province {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date
  name      String    @unique(map: "name_1")
  cities    City[]

  @@map("provinces")
}

model Client {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date
  name      String    @unique(map: "name_1")

  branch       Branch[]
  budgets      Budget[]
  serviceOrder ServiceOrder[]

  @@map("clients")
}

enum ExpenseType {
  Combustible
  Comida
  Herramienta
  Hospedaje
  Insumos
  Viatico
  Otro
}

enum ExpensePaySource {
  Reintegro
  Credito
  Debito
  Transferencia
  Otro
}

enum ExpensePaySourceBank {
  Santander
  Nacion
  Chubut
  BBVA
  Otro
}

enum IVACondition {
  ResponsableInscripto
  Monotributo
  Exento
  ConsumidorFinal
}

enum ExpenseStatus {
  Enviado
  Aprobado
  Rechazado
}

enum ExpenseInvoiceType {
  FacturaPapel
  FacturaElectronicaAdjunta
  FacturaViaMailOWhatsapp
  SinFactura
}

model File {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date

  key      String
  filename String
  mimeType String
  size     Int

  url       String    @unique(map: "url_1")
  urlExpire DateTime?

  expenseIDs String[]  @db.ObjectId
  expenses   Expense[] @relation(fields: [expenseIDs], references: [id])
  Bill       Bill[]

  @@map("files")
}

model Expense {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  expenseNumber String   @db.String
  createdAt     DateTime @default(now()) @db.Date
  updatedAt     DateTime @updatedAt

  amount         Float
  discountAmount Float?

  installments        Int?
  observations        String?
  administrativeNotes String?
  cityName            String?
  deleted             Boolean               @default(false)
  deletedAt           DateTime?             @db.Date
  expenseDate         DateTime?             @db.Date
  expenseType         ExpenseType
  paySource           ExpensePaySource
  paySourceBank       ExpensePaySourceBank?
  status              ExpenseStatus
  invoiceType         ExpenseInvoiceType
  attachmentFiles     AttachmentFile[]

  taskId String? @map("task") @db.ObjectId
  task   Task?   @relation(fields: [taskId], references: [id])

  doneBy String

  registeredById String @map("registeredBy") @db.ObjectId
  registeredBy   User   @relation("registeredExpenses", fields: [registeredById], references: [id])

  imageIDs String[] @db.ObjectId
  images   Image[]  @relation(fields: [imageIDs], references: [id])

  fileIDs String[] @db.ObjectId
  files   File[]   @relation(fields: [fileIDs], references: [id])

  auditorId String? @map("auditor") @db.ObjectId
  auditor   User?   @relation("expensesAudited", fields: [auditorId], references: [id])

  @@map("expenses")
}

model Image {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date
  key       String

  url       String    @unique(map: "url_1")
  urlExpire DateTime?

  expenseIDs String[]  @db.ObjectId
  expenses   Expense[] @relation(fields: [expenseIDs], references: [id])

  taskIDs String[] @db.ObjectId
  task    Task[]   @relation(name: "TaskImages", fields: [taskIDs], references: [id])

  @@map("images")
}

enum TaskType {
  Preventivo
  Correctivo
  Instalacion
  Desmonte
  Actualizacion
  InspeccionPolicial
}

enum TaskStatus {
  SinAsignar
  Pendiente
  Finalizada
  Aprobada
}

model Task {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  taskNumber    Int        @unique
  createdAt     DateTime   @default(now()) @db.Date
  updatedAt     DateTime   @updatedAt
  closedAt      DateTime?  @db.Date
  openedAt      DateTime   @default(now()) @db.Date
  startedAt     DateTime?  @db.Date
  deleted       Boolean    @default(false)
  deletedAt     DateTime?  @db.Date
  description   String
  status        TaskStatus
  taskType      TaskType
  actNumber     Int?
  movitecTicket String?
  clientName    String?
  businessName  String?
  useMaterials  Boolean?   @default(false)

  participants String[]

  branchId String? @map("branch") @db.ObjectId
  branch   Branch? @relation(fields: [branchId], references: [id])

  businessId String?   @map("business") @db.ObjectId
  business   Business? @relation(fields: [businessId], references: [id])

  auditorId String? @db.ObjectId
  auditor   User?   @relation(name: "auditor", fields: [auditorId], references: [id])

  createdById String? @db.ObjectId
  createdBy   User?   @relation(name: "createdTasks", fields: [createdById], references: [id])

  assignedIDs String[] @db.ObjectId
  assigned    User[]   @relation(name: "assigned", fields: [assignedIDs], references: [id])

  imagesIDs String[] @db.ObjectId
  images    Image[]  @relation(name: "TaskImages", fields: [imagesIDs], references: [id])

  expenses Expense[]

  observations String?
  User         User?   @relation(fields: [userId], references: [id])
  userId       String? @db.ObjectId

  preventiveId String?     @map("preventive") @db.ObjectId
  preventive   Preventive? @relation(fields: [preventiveId], references: [id])

  serviceOrderId String?       @map("serviceOrder") @db.ObjectId
  serviceOrder   ServiceOrder? @relation(fields: [serviceOrderId], references: [id])

  priceHistory TaskPriceHistory[]

  @@map("tasks")
}

type TaskPriceHistory {
  price     Float
  updatedAt DateTime
}

model TaskPrice {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt

  taskType TaskType
  price    Float

  businessId String   @map("business") @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])

  priceHistory TaskPriceHistory[]

  @@unique([businessId, taskType])
  @@map("task_prices")
}

enum PreventiveStatus {
  Pendiente
  AlDia
}

enum PreventiveFrequency {
  Mensual
  Bimestral
  Trimestral
  Cuatrimestral
  Semestral
  Anual
}

model Preventive {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt

  lastDoneAt       DateTime? @db.Date
  batteryChangedAt DateTime? @db.Date

  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date

  frequency    PreventiveFrequency?
  months       String[]
  observations String?
  status       PreventiveStatus

  businessId String   @map("business") @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])

  branchId String @map("branch") @db.ObjectId
  branch   Branch @relation(fields: [branchId], references: [id])

  assignedIDs String[] @db.ObjectId
  assigned    User[]   @relation(fields: [assignedIDs], references: [id])

  tasks Task[]

  @@map("preventives")
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now()) @db.Date
  updatedAt  DateTime  @updatedAt
  deleted    Boolean   @default(false)
  deletedAt  DateTime? @db.Date
  email      String    @unique(map: "email_1")
  firstName  String
  fullName   String
  lastName   String
  password   String
  privateKey String?
  roles      Role[]

  cityId String? @map("city") @db.ObjectId
  city   City?   @relation(fields: [cityId], references: [id])

  tasksAudited Task[] @relation("auditor")

  tasksAssignedIDs String[] @db.ObjectId
  tasksAssigned    Task[]   @relation(name: "assigned", fields: [tasksAssignedIDs], references: [id])

  preventivesIDs String[]     @map("preventives") @db.ObjectId
  preventives    Preventive[] @relation(fields: [preventivesIDs], references: [id])

  registeredExpenses Expense[] @relation("registeredExpenses")
  expensesAudited    Expense[] @relation("expensesAudited")
  createdTasks       Task[]    @relation("createdTasks")
  createdTasksIds    String[]  @db.ObjectId
  Task               Task[]
  createdBudgets     Budget[]  @relation("createdBudgets")

  expoTokens ExpoToken[]

  @@map("users")
}

model ExpoToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  @@map("expo_tokens")
}

type AttachmentFile {
  key      String
  filename String
  mimeType String
  size     Int

  url       String
  urlExpire DateTime?
}

model BillingProfile {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime     @default(now()) @db.Date
  updatedAt        DateTime     @updatedAt
  deleted          Boolean      @default(false)
  deletedAt        DateTime?    @db.Date
  CUIT             String
  legalName        String
  IVACondition     IVACondition
  comercialAddress String
  billingEmail     String
  contacts         Contact[]

  businessId String   @unique @map("business") @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])

  budgets     Budget[]
  Bill        Bill[]
  BankAccount BankAccount[]

  @@map("billing_profiles")
}

type Contact {
  email    String
  fullName String
  phone    String
  notes    String
}

enum BudgetStatus {
  Borrador
  Enviado
  Aprobado
  Rechazado
  Expirado
}

model Budget {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date

  // Información básica del presupuesto
  subject     String // Asunto
  description String? // Descripción
  price       Float // Precio
  status      BudgetStatus @default(Borrador)
  clientName  String? // Nombre del cliente

  // Integración con Gmail
  gmailThreadId String? // ID de la cadena de mail

  // Relaciones
  billingProfileId String         @map("billingProfile") @db.ObjectId
  billingProfile   BillingProfile @relation(fields: [billingProfileId], references: [id])

  clientId String? @map("client") @db.ObjectId
  client   Client? @relation(fields: [clientId], references: [id])

  branchId String? @map("branch") @db.ObjectId
  branch   Branch? @relation(fields: [branchId], references: [id])

  createdById String @map("createdBy") @db.ObjectId
  createdBy   User   @relation("createdBudgets", fields: [createdById], references: [id])

  serviceOrder ServiceOrder[]

  @@map("budgets")
}

enum ServiceOrderStatus {
  Pendiente
  EnProgreso
  Finalizada
  ParaFacturar
}

model ServiceOrder {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime           @default(now()) @db.Date
  updatedAt          DateTime           @updatedAt
  serviceOrderNumber Int                @unique
  status             ServiceOrderStatus
  description        String?

  clientId String @map("client") @db.ObjectId
  client   Client @relation(fields: [clientId], references: [id])

  businessId String   @map("business") @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])

  branchId String @map("branch") @db.ObjectId
  branch   Branch @relation(fields: [branchId], references: [id])

  tasks Task[]

  budgetId String? @map("budget") @db.ObjectId
  budget   Budget? @relation(fields: [budgetId], references: [id])

  @@map("service_orders")
}

enum BillStatus {
  Borrador
  Pendiente
  Vencida
  Pagada
}

enum CAEStatus {
  Autorizado
  Rechazado
  Observado
}

enum AlicuotaIVA {
  IVA_21
  IVA_10_5
  IVA_27
  IVA_0
}

enum AccountType {
  CuentaCorriente
  CajaDeAhorro
  CuentaDeSueldo
  CuentaEnMonedaExtranjera
}

enum ComprobanteType {
  A
  B
  C
}

type BillDetail {
  description String
  quantity    Int
  unitPrice   Float
  alicuotaIVA AlicuotaIVA
}

type CAEData {
  code              String
  expirationDate    DateTime
  comprobanteNumber String
  status            CAEStatus
}

model Bill {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt

  businessId String   @map("business") @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])

  billingProfileId String         @map("billingProfile") @db.ObjectId
  billingProfile   BillingProfile @relation(fields: [billingProfileId], references: [id])

  legalName      String
  CUIT           String
  billingAddress String
  IVACondition   IVACondition

  status          BillStatus
  description     String?
  comprobanteType ComprobanteType
  saleCondition   String
  punctualService Boolean         @default(false)
  serviceDate     DateTime?       @db.Date
  startDate       DateTime?       @db.Date
  endDate         DateTime?       @db.Date
  dueDate         DateTime?       @db.Date
  pointOfSale     Int? // Punto de venta (4 dígitos asignado por AFIP)

  caeData           CAEData?
  details           BillDetail[]
  withholdingAmount Float?
  pdfId             String?      @db.ObjectId
  pdf               File?        @relation(fields: [pdfId], references: [id])

  @@map("bills")
}

model BankAccount {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date

  bank          String
  accountNumber String
  cbu           String?
  alias         String?
  accountType   AccountType
  holder        String
  holderCUIT    String
  balance       Float       @default(0)

  billingProfileId     String?         @map("billingProfile") @db.ObjectId
  billingProfile       BillingProfile? @relation(fields: [billingProfileId], references: [id])
  sourceMovements      BankMovement[]  @relation("SourceMovements")
  destinationMovements BankMovement[]  @relation("DestinationMovements")

  @@map("bank_accounts")
}

model BankMovement {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date

  amount Float
  date   DateTime @db.Date

  sourceAccountId String      @map("sourceAccount") @db.ObjectId
  sourceAccount   BankAccount @relation("SourceMovements", fields: [sourceAccountId], references: [id])

  destinationAccountId String?      @map("destinationAccount") @db.ObjectId
  destinationAccount   BankAccount? @relation("DestinationMovements", fields: [destinationAccountId], references: [id])

  @@map("bank_movements")
}
