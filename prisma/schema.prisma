generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider     = "mongodb"
  url          = env("MONGODB_URI")
  relationMode = "prisma"
}

enum Role {
  Tecnico
  AdministrativoTecnico
  AdministrativoContable
  Auditor
}

model Activity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt

  @@map("activities")
}

model Branch {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date
  number    Int

  clientId String @map("client") @db.ObjectId
  client   Client @relation(fields: [clientId], references: [id])

  cityId     String       @map("city") @db.ObjectId
  city       City         @relation(fields: [cityId], references: [id])
  Preventive Preventive[]
  Task       Task[]

  businessesIDs String[]   @db.ObjectId
  businesses    Business[] @relation(fields: [businessesIDs], references: [id])

  @@map("branches")
}

model Business {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date
  name      String    @unique(map: "name_1")

  preventives Preventive[]
  tasks       Task[]

  branchesIDs String[] @db.ObjectId
  branches    Branch[] @relation(fields: [branchesIDs], references: [id])

  @@map("businesses")
}

model City {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date
  name      String    @unique(map: "name_1")

  provinceId String   @db.ObjectId
  province   Province @relation(fields: [provinceId], references: [id])

  users  User[]
  Branch Branch[]

  @@map("cities")
}

model Province {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date
  name      String    @unique(map: "name_1")
  cities    City[]

  @@map("provinces")
}

model Client {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date
  name      String    @unique(map: "name_1")

  branch Branch[]

  @@map("clients")
}

enum ExpenseType {
  Combustible
  Comida
  Herramienta
  Hospedaje
  Insumos
}

enum ExpensePaySource {
  Reintegro
  Tarjeta
}

enum ExpenseStatus {
  Enviado
  Aprobado
  Rechazado
}

model Expense {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime         @default(now()) @db.Date
  updatedAt   DateTime         @updatedAt
  amount      Int
  deleted     Boolean          @default(false)
  deletedAt   DateTime?        @db.Date
  expenseType ExpenseType
  paySource   ExpensePaySource
  status      ExpenseStatus

  taskId String? @map("task") @db.ObjectId
  task   Task?   @relation(fields: [taskId], references: [id])

  doneById String @map("doneBy") @db.ObjectId
  doneBy   User   @relation("expensesMade", fields: [doneById], references: [id])

  imageId String @map("image") @db.ObjectId
  image   Image  @relation(fields: [imageId], references: [id])

  auditorId String? @map("auditor") @db.ObjectId
  auditor   User?   @relation("expensesAudited", fields: [auditorId], references: [id])

  @@map("expenses")
}

model Image {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now()) @db.Date
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date
  key       String

  url       String    @unique(map: "url_1")
  urlExpire DateTime?

  expense Expense[]

  taskIDs String[] @db.ObjectId
  task    Task[]   @relation(name: "TaskImages", fields: [taskIDs], references: [id])

  @@map("images")
}

enum TaskType {
  Preventivo
  Correctivo
  Instalacion
  Desmonte
  Actualizacion
}

enum TaskStatus {
  SinAsignar
  Pendiente
  Finalizada
  Aprobada
}

model Task {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime   @default(now()) @db.Date
  updatedAt       DateTime   @updatedAt
  closedAt        DateTime?  @db.Date
  openedAt        DateTime   @default(now()) @db.Date
  deleted         Boolean    @default(false)
  deletedAt       DateTime?  @db.Date
  description     String
  status          TaskStatus
  taskType        TaskType
  workOrderNumber Int?
  metadata        Json?

  branchId String @map("branch") @db.ObjectId
  branch   Branch @relation(fields: [branchId], references: [id])

  businessId String   @map("business") @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])

  auditorId String? @db.ObjectId
  auditor   User?   @relation(name: "auditor", fields: [auditorId], references: [id])

  assignedIDs String[] @db.ObjectId
  assigned    User[]   @relation(name: "assigned", fields: [assignedIDs], references: [id])

  imagesIDs String[] @db.ObjectId
  images    Image[]  @relation(name: "TaskImages", fields: [imagesIDs], references: [id])

  expenses Expense[]

  observations String?

  @@map("tasks")
}

enum PreventiveStatus {
  Pendiente
  AlDia
}

model Preventive {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt

  lastDoneAt       DateTime? @db.Date
  batteryChangedAt DateTime? @db.Date

  deleted   Boolean   @default(false)
  deletedAt DateTime? @db.Date

  frequency    Int
  months       String[]
  observations String?
  status       PreventiveStatus

  businessId String   @map("business") @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])

  branchId String @map("branch") @db.ObjectId
  branch   Branch @relation(fields: [branchId], references: [id])

  assignedIDs String[] @db.ObjectId
  assigned    User[]   @relation(fields: [assignedIDs], references: [id])

  @@map("preventives")
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now()) @db.Date
  updatedAt  DateTime  @updatedAt
  deleted    Boolean   @default(false)
  deletedAt  DateTime? @db.Date
  email      String    @unique(map: "email_1")
  firstName  String
  fullName   String
  lastName   String
  password   String
  privateKey String?
  roles      Role[]

  cityId String? @map("city") @db.ObjectId
  city   City?   @relation(fields: [cityId], references: [id])

  tasksAudited Task[] @relation("auditor")

  tasksAssignedIDs String[] @db.ObjectId
  tasksAssigned    Task[]   @relation(name: "assigned", fields: [tasksAssignedIDs], references: [id])

  preventivesIDs String[]     @map("preventives") @db.ObjectId
  preventives    Preventive[] @relation(fields: [preventivesIDs], references: [id])

  expensesMade    Expense[] @relation("expensesMade")
  expensesAudited Expense[] @relation("expensesAudited")

  @@map("users")
}
